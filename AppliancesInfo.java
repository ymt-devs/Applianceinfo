/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */

/**
 *
 * @author paraj
 */

import java.awt.Desktop;
import java.io.*;
import javax.swing.*;   
import java.util.logging.*; 




public class AppliancesInfo extends javax.swing.JFrame {
    /**
     * Creates new form appliancesinfo
     */
    public AppliancesInfo() {
        initComponents();        
    }
    
    int countClickedTimes=0;
    
    //static String[][] Data1 = new String[20][6];
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        kGradientPanel1 = new keeptoo.KGradientPanel();
        jPanel2 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jRadioButton1 = new javax.swing.JRadioButton();
        jRadioButton2 = new javax.swing.JRadioButton();
        jRadioButton3 = new javax.swing.JRadioButton();
        jLabel10 = new javax.swing.JLabel();
        AddButton = new javax.swing.JButton();
        PID = new javax.swing.JTextField();
        PN = new javax.swing.JTextField();
        MN = new javax.swing.JTextField();
        price = new javax.swing.JTextField();
        category = new javax.swing.JComboBox<>();
        ClearAdd = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        SearchTF = new javax.swing.JTextField();
        SearchAppliance = new javax.swing.JButton();
        jComboBox1 = new javax.swing.JComboBox<>();
        ClearSearch = new javax.swing.JButton();
        AccessoriesAvailable = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        SortID = new javax.swing.JButton();
        SortPrice = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        File = new javax.swing.JMenu();
        Import = new javax.swing.JMenuItem();
        Exit = new javax.swing.JMenuItem();
        JMenuHelp = new javax.swing.JMenu();
        Help = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setAlwaysOnTop(true);

        jPanel1.setBackground(new java.awt.Color(217, 219, 218));
        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        kGradientPanel1.setkEndColor(new java.awt.Color(93, 230, 222));
        kGradientPanel1.setkStartColor(new java.awt.Color(181, 142, 204));

        javax.swing.GroupLayout kGradientPanel1Layout = new javax.swing.GroupLayout(kGradientPanel1);
        kGradientPanel1.setLayout(kGradientPanel1Layout);
        kGradientPanel1Layout.setHorizontalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 954, Short.MAX_VALUE)
        );
        kGradientPanel1Layout.setVerticalGroup(
            kGradientPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 600, Short.MAX_VALUE)
        );

        jPanel2.setBackground(new java.awt.Color(69, 69, 69));
        jPanel2.setOpaque(false);

        jPanel5.setBackground(new java.awt.Color(255, 255, 255));
        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Add", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 24))); // NOI18N
        jPanel5.setOpaque(false);

        jLabel4.setText("Product ID:");

        jLabel5.setText("Product Name:");

        jLabel6.setText("Model Number:");

        jLabel7.setText("Category:");

        jLabel8.setText("Price:");

        buttonGroup1.add(jRadioButton1);
        jRadioButton1.setText("Low");

        buttonGroup1.add(jRadioButton2);
        jRadioButton2.setText("Medium");

        buttonGroup1.add(jRadioButton3);
        jRadioButton3.setText("High");

        jLabel10.setText("Range:");

        AddButton.setText("Add");
        AddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddButtonActionPerformed(evt);
            }
        });

        category.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Category--", "Keyboard", "RAM", "Mouse", "Headphones", "Motherboard", "Power Supply", "Case", "Processor", "Graphics Card", " " }));

        ClearAdd.setText("Clear");
        ClearAdd.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearAddActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addComponent(AddButton, javax.swing.GroupLayout.PREFERRED_SIZE, 102, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 209, Short.MAX_VALUE)
                        .addComponent(ClearAdd, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(MN, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(PID, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(PN, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addComponent(jLabel10)
                                .addGap(6, 6, 6)
                                .addComponent(jRadioButton1)
                                .addGap(10, 10, 10)
                                .addComponent(jRadioButton2)
                                .addGap(10, 10, 10)
                                .addComponent(jRadioButton3))
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 61, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                .addContainerGap(16, Short.MAX_VALUE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel5Layout.createSequentialGroup()
                                .addGap(4, 4, 4)
                                .addComponent(jLabel10))
                            .addComponent(jRadioButton1)
                            .addComponent(jRadioButton2)
                            .addComponent(jRadioButton3)))
                    .addGroup(jPanel5Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addGap(21, 21, 21)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(PN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel6)
                            .addComponent(MN, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel8)
                            .addComponent(price, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(18, 18, 18)
                .addGroup(jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(AddButton)
                    .addComponent(ClearAdd))
                .addContainerGap())
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));
        jPanel6.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Search", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 24))); // NOI18N
        jPanel6.setOpaque(false);

        SearchAppliance.setText("Search Appliance");
        SearchAppliance.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SearchApplianceActionPerformed(evt);
            }
        });

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "--Categories--", "Keyboard", "RAM", "Mouse", "Headphones", "Motherboard", "Power Supply", "Case", "Processor", "Graphics Card", " " }));

        ClearSearch.setText("Clear");
        ClearSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ClearSearchActionPerformed(evt);
            }
        });

        AccessoriesAvailable.setText("Appliances available in category");
        AccessoriesAvailable.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AccessoriesAvailableActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(ClearSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 107, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(SearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 118, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(SearchAppliance, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(AccessoriesAvailable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(SearchAppliance)
                    .addComponent(SearchTF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(AccessoriesAvailable))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(ClearSearch)
                .addGap(19, 19, 19))
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(39, Short.MAX_VALUE)
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(36, 36, 36)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        jScrollPane1.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Appliances Information System", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION, new java.awt.Font("Times New Roman", 0, 30))); // NOI18N

        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Product ID", "Product Name", "Model Number", "Category", "Range", "Price"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTable1.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable1.setGridColor(new java.awt.Color(255, 255, 255));
        jTable1.setShowGrid(false);
        jTable1.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTable1);
        if (jTable1.getColumnModel().getColumnCount() > 0) {
            jTable1.getColumnModel().getColumn(0).setResizable(false);
            jTable1.getColumnModel().getColumn(2).setResizable(false);
            jTable1.getColumnModel().getColumn(3).setResizable(false);
            jTable1.getColumnModel().getColumn(4).setResizable(false);
            jTable1.getColumnModel().getColumn(5).setResizable(false);
        }

        SortID.setText("Sort by ID");
        SortID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortIDActionPerformed(evt);
            }
        });

        SortPrice.setText("Sort by price");
        SortPrice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SortPriceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(658, 658, 658)
                            .addComponent(SortID, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(30, 30, 30)
                            .addComponent(SortPrice, javax.swing.GroupLayout.PREFERRED_SIZE, 110, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jPanel1Layout.createSequentialGroup()
                            .addGap(51, 51, 51)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 873, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(0, 50, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 279, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(SortID)
                    .addComponent(SortPrice))
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(36, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jPanel1Layout.createSequentialGroup()
                    .addContainerGap()
                    .addComponent(kGradientPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addContainerGap()))
        );

        jMenuBar1.setToolTipText("");

        File.setText("File");

        Import.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Import.setText("Import");
        Import.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ImportActionPerformed(evt);
            }
        });
        File.add(Import);

        Exit.setText("Exit");
        Exit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ExitActionPerformed(evt);
            }
        });
        File.add(Exit);

        jMenuBar1.add(File);

        JMenuHelp.setText("Help");

        Help.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_DOWN_MASK));
        Help.setText("Help");
        Help.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                HelpActionPerformed(evt);
            }
        });
        JMenuHelp.add(Help);

        jMenuBar1.add(JMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void ImportActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ImportActionPerformed
        // TODO add your handling code here:
            imp();
    }//GEN-LAST:event_ImportActionPerformed

    private void SortPriceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortPriceActionPerformed
        // TODO add your handling code here:
        String[][] sortedData=MergeSorter.getSortedData(); //stores sorted value returned by getSortedData method of MergeSorter class
        int row=getRowCount(); //gets number of rows from getRowCount method
        for(int i=0;i<row;i++){
            for(int j=0;j<6;j++){
                jTable1.setValueAt(sortedData[i][j], i, j); //Sets sorted data in the table
            }
        }
        //message for empty table or task completion
        if(row != 0){
            JOptionPane.showMessageDialog(this, "Data has been sorted by Price."); 
        }else {
            JOptionPane.showMessageDialog(this, "Table is Empty. Please Add or Import file.");
        }
    }//GEN-LAST:event_SortPriceActionPerformed

    private void AddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddButtonActionPerformed
        // TODO add your handling code here:
        //Stores user entered value into dedicated string
        String ProductID=PID.getText();
        String ProductName=PN.getText();
        String ModuleNumber=MN.getText();
        String Price=price.getText();
        
        String Range = "";
        if (jRadioButton1.isSelected()) {
            Range = jRadioButton1.getText();
        }
        if (jRadioButton2.isSelected()) {
            Range = jRadioButton2.getText();
        }
        if (jRadioButton3.isSelected()) {
            Range = jRadioButton3.getText();
        }
        
        String Category=(String)category.getSelectedItem();

        String data[] = {ProductID, ProductName, ModuleNumber, Category, Range, Price};
        int nextRow = 0;//to count rows
        boolean empty = false;// row is empty, data can be added
        String s; //empty string to store table cell data
        int colCount = jTable1.getColumnCount();
        if (!ProductID.isEmpty()) { //exception handling if user forgets to  enter product id
            if (!ProductName.isEmpty()) { //exception handling if user forgets to  enter product name
                if (!ModuleNumber.isEmpty()) { //exception handling if user forgets to  enter model number
                    if (!Range.isEmpty()) {//exception handling if user forgets to  select range
                        if (category.getSelectedIndex() != 0) { //exception handling if user doesnot select category
                            if (!Price.isEmpty()) { //exception handling if user forgets to  enter price
                                //loop to find empty string
                                do {
                                    s = (String) jTable1.getValueAt(nextRow, 0);
                                    if (s != null && s.length() != 0) {
                                        nextRow++;
                                    } else {
                                        empty = true;
                                    }
                                } while (!empty);   
                                //exception handling if user enters string in place of integer
                                try{
                                    int a= Integer.parseInt(ProductID);
                                    //exception handling if user enters string in place of integer
                                    try{
                                        int b=Integer.parseInt(Price);
                                        for (int i = 0; i < colCount; i++) {
                                            jTable1.setValueAt(data[i], nextRow, i);
                                        }
                                        JOptionPane.showMessageDialog(this, "The Product has been added.");
                                        ClearAdd();
                                    }catch(NumberFormatException e){
                                        JOptionPane.showMessageDialog( this, "Please enter integer value in Price");
                                    }
                                }catch(NumberFormatException e) {
                                    JOptionPane.showMessageDialog( this, "Please enter integer value in ProductID");
                                } 
                            }else{
                                    JOptionPane.showMessageDialog( this, "Please enter Price");
                            }
                        }else{
                                JOptionPane.showMessageDialog(this, "Please choose Category");
                        }
                    }else{
                            JOptionPane.showMessageDialog(this, "Please select Range");
                    }
                }else{
                        JOptionPane.showMessageDialog(this, "Please enter Model Number");
                }
            }else{
                    JOptionPane.showMessageDialog(this, "Please enter Product Name");
            }
        }else{
                JOptionPane.showMessageDialog(this, "Please enter Product ID");
        }
    }//GEN-LAST:event_AddButtonActionPerformed

    private void SearchApplianceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SearchApplianceActionPerformed
        // TODO add your handling code here:
        int row= getRowCount(); ///get number of non empty rows in table
        if(row>0){ //if condition in case table is empty 
            try{
                int Price = Integer.parseInt(SearchTF.getText());
                String result[]=BinarySearch.binary(Price); //calls binary method in BinarySearch class
                if(result[0] != null){ //condition to show data or non available price
                    for(int i=0;i<6;i++){
                        if(i==0){
                            result[i]="Product ID: "+result[i];
                        }else if(i==1){
                            result[i]="Product Name: "+result[i];
                        }else if(i==2){
                            result[i]="Model Number: "+result[i];
                        }else if(i==3){
                            result[i]="Category: "+result[i];
                        }else if(i==4){
                            result[i]="Range: "+result[i];
                        }else if(i==5){
                            result[i]="Price: "+result[i];
                        }
                    }            
                    JOptionPane.showMessageDialog(this, result);
                }else{
                    JOptionPane.showMessageDialog(this, "There are no appliances available for the price");
                }
            }catch(Exception e){
                String Price=SearchTF.getText();
                if(Price.equals("")){
                    JOptionPane.showMessageDialog(this, "Please enter price to search available appliances.");
                }else{
                    JOptionPane.showMessageDialog(this, "Please enter price as Integer Value.");
                }
            }
        }else{
            JOptionPane.showMessageDialog(this, "Table is empty. Please add or import data to table.");
        }
    }//GEN-LAST:event_SearchApplianceActionPerformed

    private void SortIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SortIDActionPerformed
        // TODO add your handling code here:
        String[][] SortedData=MergeSorter.getSortedDataID(); //gets sorted data by ID
        int row=getRowCount(); //gets non empty row count
        for(int i=0;i<row;i++){
            for(int j=0;j<6;j++){
                jTable1.setValueAt(SortedData[i][j], i, j); //sets values at the table
            }
        }
        //condition for proper message of sort completion or empty table
        if(row != 0){
            JOptionPane.showMessageDialog(this, "Data has been sorted by ID.");
        }else {
            JOptionPane.showMessageDialog(this, "Table is Empty. Please Add or Import file.");
        }  
    }//GEN-LAST:event_SortIDActionPerformed

    private void ExitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ExitActionPerformed
        // TODO add your handling code here:
        System.exit(0); //exits the GUI whenever the button is pressed
    }//GEN-LAST:event_ExitActionPerformed

    private void AccessoriesAvailableActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AccessoriesAvailableActionPerformed
        // TODO add your handling code here:
        int row=AppliancesInfo.getRowCount(); //gets non empty row count
        //condition if the table is empty or not
        if(row!=0){
            if(jComboBox1.getSelectedIndex() != 0){
                String value=(String)jComboBox1.getSelectedItem(); //stores user entered value
            
                String[][] Data1=getTableData(); //stores table data
                int count=0; //to count total available appliances
                String Data;
                String Data2=""; //to store number of searched appliances
                for(int i=0;i<row;i++){
                    Data = Data1[i][3];
                    if(Data.equals(value)){
                        count++;
                        Data2=  Data2 + count + ") " + Data1[i][1]+ "\n";
                    }
                }
                //condition to showw proper message along with appliances
                if(count>0){
                    JOptionPane.showMessageDialog(this, "There are "+ count+" Accessories available in the category."+"\n"+ 
                        "The available appliances are: " +"\n"+ Data2);
                }else{
                    JOptionPane.showMessageDialog(this, "There are no accessories available for the "+ value+" category.");
                }
            }else{
                JOptionPane.showMessageDialog(this, "Please select a Category");
            }
        }else{
                JOptionPane.showMessageDialog(this, "Table is Empty. Please Add or Import file.");
            }
    }//GEN-LAST:event_AccessoriesAvailableActionPerformed

    private void ClearAddActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearAddActionPerformed
        // TODO add your handling code here:
        ClearAdd(); //calls ClearAdd() method
    }//GEN-LAST:event_ClearAddActionPerformed

    private void ClearSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ClearSearchActionPerformed
        // TODO add your handling code here:
        ClearSearch(); //calls ClearSearch() method
    }//GEN-LAST:event_ClearSearchActionPerformed

    private void HelpActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_HelpActionPerformed
        // TODO add your handling code here:
        File myFile=new File(".\\CSV and User manual file\\userManual.pdf");
        //exception handling encase the file is not fount in the location
        try {
            Desktop.getDesktop().open(myFile);
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(this, "File not found");
        }
    }//GEN-LAST:event_HelpActionPerformed
    //method to import data into the table
    public void imp()
    {                                       
        // TODO add your handling code here:
        
        if(countClickedTimes==0){ //condition for letting user know if they had already imported the file
        String filePath=".\\CSV and User manual file\\data.csv";//location of the file
        int row=0; //for empty row index
        boolean empty=false; //indicated the row is not empty
        do{
            String b = (String) jTable1.getValueAt(row, 0);
            if (b != null && b.length() != 0) {
                  row++;
            } else {
                empty = true;
            }
        } while (!empty);
        try 
        {
            BufferedReader bufferreader=new BufferedReader(new FileReader(filePath));
            String line="";
            while((line=bufferreader.readLine())!=null)
            {
                String[] data=line.split(",");
                for(int i =0;i<data.length;i++)
                {
                    jTable1.setValueAt(data[i], row, i);
                }
                row++;
            } 
            JOptionPane.showMessageDialog(this, "File is Imported Successfully."); //message if the umported the file
            countClickedTimes++;
        } 
        catch (FileNotFoundException ex) 
        {
            JOptionPane.showMessageDialog(this, "File not Found");
        } catch (IOException ex)
        {
            Logger.getLogger(AppliancesInfo.class.getName()).log(Level.SEVERE, null, ex);
        }
        } else{
            JOptionPane.showMessageDialog(this, "The File has been already imported.");
        }
    }
    //method to get all the data of price column only
    public static int[] getPrice()
    {
        
        String TableData[][]= getTableData();
        int row=getRowCount();
        String SearchPrice[]=new String[row];
        int a[]=new int[row];
        for (int i=0;i<TableData.length;i++)
            {
                SearchPrice[i]= TableData[i][5];
                a[i]=Integer.parseInt(SearchPrice[i]); //converts the data into integer as it was in string
            }
      return a; //returns price array
    }
    
    //method to get all the data of ID column only
    public static int[] getID()
    {
        
        String TableData[][]= getTableData();
        int row=getRowCount();
        int ID[]=new int[row];
        for (int i=0;i<TableData.length;i++)
            {
                ID[i]= Integer.parseInt(TableData[i][0]);//converts the data into integer as it was in string
            }
      return ID; //returnd ID array
    }
    
    //methos to get number of non empty row
    public static int getRowCount(){
        
        int row=0;
        boolean empty=false; //row is not empty 
        do{
            String b = (String) jTable1.getValueAt(row, 0);
            if (b != null && b.length() != 0) {
                  row++; //row count
            } else {
                empty = true;
            }
        }while (!empty);
        return row; //returns row value
    }
    
    //method to get all the data stored in table
    public static String[][] getTableData(){
        int row=getRowCount();//jgets total number of non empty rows
        String TableData[][]=new String[row][6]; 
        for(int i=0; i<row;i++){
            for(int j=0; j<6; j++){
                TableData[i][j]=(String)jTable1.getValueAt(i, j);
            }
        }
        return TableData; //returns table data
    }

    //method inorder to clear all the valued entered/selected by user in add panel
    public void ClearAdd(){
         
        PID.setText("");
        MN.setText("");
        PN.setText("");
        price.setText("");
        category.setSelectedIndex(0);
        buttonGroup1.clearSelection();
    }
    //method inorder to clear all the valued entered/selected by user in search panel 
    public void ClearSearch(){
        
        SearchTF.setText("");
        jComboBox1.setSelectedIndex(0);
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(AppliancesInfo.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
            
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new AppliancesInfo().setVisible(true);
            }
        });
    }
        
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton AccessoriesAvailable;
    private javax.swing.JButton AddButton;
    private javax.swing.JButton ClearAdd;
    private javax.swing.JButton ClearSearch;
    private javax.swing.JMenuItem Exit;
    private javax.swing.JMenu File;
    private javax.swing.JMenuItem Help;
    private javax.swing.JMenuItem Import;
    private javax.swing.JMenu JMenuHelp;
    private javax.swing.JTextField MN;
    private javax.swing.JTextField PID;
    private javax.swing.JTextField PN;
    private javax.swing.JButton SearchAppliance;
    private javax.swing.JTextField SearchTF;
    private javax.swing.JButton SortID;
    private javax.swing.JButton SortPrice;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JComboBox<String> category;
    private javax.swing.JComboBox<String> jComboBox1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JRadioButton jRadioButton1;
    private javax.swing.JRadioButton jRadioButton2;
    private javax.swing.JRadioButton jRadioButton3;
    private javax.swing.JScrollPane jScrollPane1;
    public static javax.swing.JTable jTable1;
    private keeptoo.KGradientPanel kGradientPanel1;
    private javax.swing.JTextField price;
    // End of variables declaration//GEN-END:variables

}